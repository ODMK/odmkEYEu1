# -*- coding: utf-8 -*-
# *****************************************************************************
# /////////////////////////////////////////////////////////////////////////////
# header begin-----------------------------------------------------------------
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# *****************************************************************************
#
# __::((cyclicZn_test.py))::__
#
# This script demonstrates the cyclicZn group basic processing
# Tests multiple plotting methods
#
# Real time controls:
# n = number of points on cycle
# m = points skipped when drawing star-polygon
#
#
# *****************************************************************************
# /////////////////////////////////////////////////////////////////////////////
# header end-------------------------------------------------------------------
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# *****************************************************************************


# /////////////////////////////////////////////////////////////////////////////
# #############################################################################
# begin : abstract
# #############################################################################
# /////////////////////////////////////////////////////////////////////////////
#
# define all possible polygrams up to n points (??is there patterns, math??)
#
# https://en.wikipedia.org/wiki/Star_polygon
#
# The (non-degenerate) regular stars of up to 12 sides are:
#
#     Pentagram    - {5/2}
#     Heptagram    - {7/2}, {7/3}
#     Octagram     - {8/3}
#     Enneagram    - {9/2}, {9/4}
#     Decagram     - {10/3}
#     Hendecagram  - {11/2}, {11/3}, {11/4} and {11/5}
#     Dodecagram   - {12/5}
#                  - {13/2}, {13/3}, {13/4}, {13/5}, {13/6}
#                  - {14/3}, {14/4}, {14/5}, {14/6}
#                  - {15/2}, {15/4}, {15/6}, {15/7}
#                  - {16/3}, {16/5}, {16/6}, {16/7}
#
# m and n must be co-prime, or the figure will degenerate.
#
# The degenerate regular stars of up to 12 sides are:
#
#     Hexagram     - {6/2}
#     Octagram     - {8/2}
#     Enneagram    - {9/3}
#     Decagram     - {10/2}, //**{10/4} illegal -> pentagram**
#     Dodecagram   - {12/2}, {12/3} and {12/4}
#
#                  - {14/2}
#                  - {15/3}, {15/5}
#                  - {16/2}, {16/4}
#
#     if n/k >= 2, -> illegal value for k

# /////////////////////////////////////////////////////////////////////////////
# #############################################################################
# end : abstract
# #############################################################################
# /////////////////////////////////////////////////////////////////////////////

import numpy as np
import matplotlib.pyplot as plt

from math import cos,sin,atan,pi,e,floor,ceil

from odmkAux import *

# /////////////////////////////////////////////////////////////////////////////
# #############################################################################
# begin : function definitions
# #############################################################################
# /////////////////////////////////////////////////////////////////////////////

# generate cyclic group Zn member elements

# pure python implementation of function (no numpy/scipy)
# needs verification
# def cyclicZnPy(n):
#    ''' calculates the Zn roots of unity 
#    '''
#    cZn = [(0+0j) for x in xrange(n)]
#    for k in range(n):
#        ##z(i) = %e**(((i-1)*2*%pi*%i)/n)                      ##Define cyclic group Zn points
#        cZn[k] = cos(((k-1)*2*pi)/n) + sin(((k-1)*2*pi)/n)*1j    ##Euler's identity
#
#    return cZn


def cyclicZn(n):
    ''' calculates the Zn roots of unity '''
    cZn = np.zeros((n, 1))*(0+0j)    # column vector of zero complex values
    for k in range(n):
        # z(k) = e^(((k)*2*pi*1j)/n)                         # Define cyclic group Zn points
        cZn[k] = cos(((k)*2*pi)/n) + sin(((k)*2*pi)/n)*1j    # Euler's identity

    return cZn

# /////////////////////////////////////////////////////////////////////////////
# #############################################################################
# end : function definitions
# #############################################################################
# /////////////////////////////////////////////////////////////////////////////

# /////////////////////////////////////////////////////////////////////////////
# #############################################################################
# begin : main script
# #############################################################################
# /////////////////////////////////////////////////////////////////////////////


# //////////////////////////////////////////////////////////////
# begin: cyclic group Zn base:
# //////////////////////////////////////////////////////////////


n = 11;     ##number of points on cycle
m = 3;      ##points skipped when drawing polygram

# z = zeros(n,1);
# for i=1:n
#     z(i) = %e^(((i-1)*2*%pi*%i)/n)                          //Define cyclic group Zn points
#     ze(i) = cos(((i-1)*2*%pi)/n)+%i*sin(((i-1)*2*%pi)/n)    //Euler's identity    
# end
# disp(ze)

# call function to generate zn member elements (complex valued point around unit circle)
zn = cyclicZn(n)

# disp(zn)

# create baseVector position vector: a line from (0,0) to (zn(1))
baseVectorS1 = np.array([0+0j, zn[0, 0]])

# create a second position vector: a line from (0,0) to (zn(2))
baseVectorS1_1 = np.array([0+0j, zn[1, 0]])

# create an array of baseVector - radial unit vectors:
baseVector = np.zeros((n, 2))*(0+0j)
for b in range(n):
    baseVector[b, 1] = zn[b, 0]
    

# //////////////////////////////////////////////////////////////
# begin: cyclic group Zn base:
# //////////////////////////////////////////////////////////////


# //////////////////////////////////////////////////////////////
# begin: processing examples
# //////////////////////////////////////////////////////////////

# //////////////////////////////////////////////////////////////
# example2: multiply by member element
# *rotates points to other member points by rot

n2 = 5;     # number of points on cycle
m2 = 2;     # points skipped when drawing polygram

zn2 = cyclicZn(n2)


# create an array of baseVector - radial unit vectors:
baseVector_Ex2 = np.zeros((n2, 2))*(0+0j)
for b in range(n2):
    baseVector_Ex2[b, 1] = zn2[b, 0]

rot=2
zn2rot = zn2

baseVector_Ex2_1 = np.zeros((n2, 2))*(0+0j)
for j in range(n2):
    zn2rot[j, 0] = zn2[j, 0]*zn2[rot, 0]        # multiply by (2*%pi*%i)/n
    baseVector_Ex2_1[j, 1] = zn2rot[j, 0]


# //////////////////////////////////////////////////////////////
# example3: multiply by 2x member element
# *rotates points to other member points by el3 and scales by xs3
# scale zn points by xs3 value - scales radius of unit-circle

# el3=2;
# xs3=2;
# for j in range(n):
#    zn3[j] = zn[j]*xs3*zn[el3]
#    for k in range(len(baseVector[0])):
#        baseVector3[j][k] = baseVector1[j][k]*zn3(1);
#        baseVector3_1[j][k] = baseVector1[j][k]*zn3(2);

# //////////////////////////////////////////////////////////////
# example4: multiply by 2x member element
# *rotates points to other member points
# rmod4=3
# for k=1:n
#     //if rmod4=2, then k1->zn(1),k2->zn(3),k3->zn(5),k4->zn(7) = modulo(2*k-1,n)
#     zn4(k) = zn(modulo((rmod4*k-2),n)+1);
# end
# baseVector4 = baseVector1.*zn4(1);
# baseVector4_1 = baseVector1.*zn4(2);
# baseVector4_2 = baseVector1.*zn4(3);


# //////////////////////////////////////////////////////////////
# example5: drawing polygrams

# different behavior when n is odd or even
# odd case -> unicursal polygram
# even case -> multicursal polygram (hexagram => two triangles, etc...)

# re-order zn points according to the order in which the polygram is drawn
# rmod* => skips rmod* points when drawing polygram (rule for n-point polygram??)
# zn5 - vector of zn points

n5 = 6
m5 = 2

zn5 = cyclicZn(n5)                          #generate n5 x cyclic Zn points
zn5draw = np.zeros((len(zn5), 1))*(0+0j)     #init complex vector for re-ordered zn5
zn5x = np.zeros((len(zn5draw), 2))*1+1j      #init complex vector coordinate pairs for plot


# create baseVector position vector: a line from (0,0) to (zn(1))
baseVector5_1 = np.array([0+0j, zn5[0, 0]])

# create an array of baseVector - radial unit vectors:
baseVector5 = np.zeros((n5, 2))*(0+0j)
for b in range(n5):
    baseVector5[b, 1] = zn5[b, 0]


# determine from n & m whether polygon is generate or degenerate

if m5 >= n5/2.0:
    # illegal: throw error
    error('m must be less than n/2')
else:
    sel_gen = n5 % m5;            # (n mod m) determines whether degenerate or generate
    sub_poly = m5;                # determines the # of sub polygons    
    sub_pts = int(floor(n5/m5));  # determines the # of points of the sub polygon for degenerate case 


# select between generate or degenerate case
# for degenerate case, switch for different # of polygons

if sel_gen == 0:
    # degenerate case
    # reorder Zn points to correspond to sub polygons
    # ex: {9:3} => zn5(1) <= zn(1); zn5(2) <= zn(4); zn5(3) <= zn(7); zn5(4) <= zn(2); zn5(5) <= zn(8)...
    # ex: {12:3} => 1<-1 , 2<-4 , 3<-7 , 4<-10 , 5<-2 , 6<-5!
    # , 7<-8 , 8<-11 , 9<-3 , 10<-6 , 11<-9 , 12<-12
    for p in range(sub_poly):
        for q in range(sub_pts):
            # create array of coordinates (x=real,y=imag)
            # for each sub_poly, skip m5 points each iteration, then concatenate [zn5(s),zn5(s+1)]
            zn5x[q+(p*sub_pts)] = np.append(zn5[(m5*q % n5)+p],zn5[(m5*((q+1) % sub_pts) % n5)+p])
    # for r in range(n5):
        # baseVector5[r] = baseVector5_1[r]*zn5[0]    
else:
    ##generate case
    for s in range(n5):
        #create array of coordinates (x=real,y=imag)
        #skip m5 points, then concatenate [zn5(s),zn5(s+1)]
        ##if rmod5=2, then k1->zn(1),k2->zn(3),k3->zn(5),k4->zn(7)... => modulo(2*k-1,n)
        zn5x[s] = np.append(zn5[(m5*(s) % n5)],zn5[(m5*(s+1) % n5)])
    #for u in range(n5):
        #baseVector5[u] = baseVector5_1[u]*zn5[0]
    

#//////////////////////////////////////////////////////////////
#end: processing examples
#//////////////////////////////////////////////////////////////

##//////////////////////////////////////////////////////////////
##begin: convert to polar
##//////////////////////////////////////////////////////////////

#for j in range(n):
#    zRo[j] = abs(zn[j])
#    zTheta[j] = atan(zn[j].imag,zn[j].real)
#    
#    z2Ro[j] = abs(zn2[j])
#    z2Theta[j] = atan(zn2[j].imag,zn2[j].real)
#    
#    z3Ro[j] = abs(zn3[j])
#    z3Theta[j] = atan(zn3[j].imag,zn3[j].real)
#    
###    z4Ro(j) = abs(zn4(j))
###    z4Theta(j) = atan(zn4(j).imag,zn4(j).real)
#    
#    z5Ro[j] = abs(zn5[j])
#    z5Theta[j] = atan(zn5[j].imag,zn5[j].imag) 
#end
#baseVector1Ro = abs(baseVectorS1)
#baseVector1Theta = atan(baseVector1[2].imag,baseVector1[2].real)
#baseVector2Ro = abs(baseVector2)
#baseVector2Theta = atan(baseVector2[2].imag,baseVector2[2].real)
#baseVector3Ro = abs(baseVector3)
#baseVector3Theta = atan(baseVector3[2].imag,baseVector3[2].real)
###baseVector4Ro = abs(baseVector4)
###baseVector4Theta = atan(baseVector4[2].imag,baseVector4[2].real)
#baseVector5Ro = abs(baseVector5)
#baseVector5Theta = atan(baseVector5[2].imag,baseVector5[2].real)

##//////////////////////////////////////////////////////////////
##end: convert to polar
##//////////////////////////////////////////////////////////////

##close the polygon by concattenating a final point

#znx = zn+[1+0j]
#zn2x = zn2+zn2[1]
#zn3x = zn3+zn3[1]
###zn4x = {zn4;zn4(1)};
#
#zRox = zRo+zRo[1]
#zThetax = zTheta+zTheta[1]
#z2Rox = z2Ro+z2Ro[1]
#z2Thetax = z2Theta+z2Theta[1]
#z3Rox = z3Ro+z3Ro[1]
#z3Thetax = z3Theta+z3Theta[1]
#
###z4Rox = {z4Ro;z4Ro(1)};
###z4Thetax = {z4Theta;z4Theta(1)};
#
#if sel_gen == 0:
#    ##degenerate case: add points to complete multicursal polygram
#    ##zn5x = zeros(length(zn5)+sub_poly,1);
#    ##z5Rox = zeros(length(zn5)+sub_poly,1);
#    ##z5Thetax = zeros(length(zn5)+sub_poly,1);
#    for p in range(sub_poly):
#        ##concat an additional point for each sub-polygon to close the polygon
#        ##Python slicing/indexing - [included:excluded] - [2:5] = slice bits 2 to 4
#        zn5x[((p*sub_pts)-(sub_pts-p)):((p*sub_pts)+p)] = zn5[((p*sub_pts)-(sub_pts-1)):(p*sub_pts)] + zn5[(p*sub_pts)-(sub_pts-1)]
#        z5Rox[((p*sub_pts)-(sub_pts-p)):((p*sub_pts)+p)] = z5Ro[((p*sub_pts)-(sub_pts-1)):p*sub_pts] + z5Ro[(p*sub_pts)-(sub_pts-1)]
#        z5Thetax[((p*sub_pts)-(sub_pts-p)):((p*sub_pts)+p)] = z5Theta[((p*sub_pts)-(sub_pts-1)):(p*sub_pts)] + z5Theta[(p*sub_pts)-(sub_pts-1)]
#else:
#    ##generate case: add final point to complete unicursal polygram
#    ##zn5x = zeros(length(zn5)+1,1);
#    zn5x = zn5+zn5[1]
#    z5Rox = z5Ro+z5Ro[1]
#    z5Thetax = z5Theta+z5Theta[1]    


##/////////////////////////////////////////////////////////////////////////////////////////////
###############################################################################################
##end : main script
###############################################################################################
##/////////////////////////////////////////////////////////////////////////////////////////////




##/////////////////////////////////////////////////////////////////////////////////////////////
###############################################################################################
##begin : plotting
###############################################################################################
##/////////////////////////////////////////////////////////////////////////////////////////////


##//////////////////////////////////////////////////////////////
##begin: cyclic group Zn base plots:
##//////////////////////////////////////////////////////////////


#//////////////////////////////////////////////////////////////////////////////
#plot the base vectors (radial vectors) in cartesian coordinates

#initialize an empty list to store plot objects
odmkCZNplot2 = []

#plt.figure(2)
fig = plt.figure(num=2, facecolor=mplot_olive, edgecolor='k')

for i in range(n):
    odmkCZNplot2 = np.append(odmkCZNplot2,plt.plot(baseVector[i].real,baseVector[i].imag))
    
plt.setp(odmkCZNplot2, color='c', ls='-', marker='o', mfc='y', linewidth=2.00)  
plt.xlabel('<base vectors>')
plt.ylabel('%i-star polygram' %n)
plt.title('ODMK CyclicZn')  
plt.axis([-1, 1, -1, 1])
plt.grid(False)
ax = plt.gca()
ax.set_axis_bgcolor("k")    
   
   
#//////////////////////////////////////////////////////////////////////////////  
#plot the base vectors (radial vectors) in cartesian coordinates

#initialize an empty list to store plot objects
odmkCZNplot5 = []

#plt.figure(2)
fig = plt.figure(num=5, facecolor=mplot_olive, edgecolor='k')

for i in range(n5):
    #odmkCZNplot2 = np.append(odmkCZNplot5,plt.plot(baseVector5[i].real,baseVector5[i].imag))
    odmkCZNplot5 = np.append(odmkCZNplot5,plt.plot(zn5x[i].real,zn5x[i].imag))
    
plt.setp(odmkCZNplot5, color='r', ls='-', marker='o', mfc='y', linewidth=2.00)   
plt.xlabel('<base vectors>')
plt.ylabel('%i-star polygram' %n5)
plt.title('ODMK CyclicZn')  
plt.axis([-1, 1, -1, 1])
plt.grid(False)
ax = plt.gca()
ax.set_axis_bgcolor("k")   
   

##//////////////////////////////////////////////////////////////
##end: cyclic group Zn base plots:
##//////////////////////////////////////////////////////////////


plt.show()


#scf(1)
#plot(real(zn),imag(zn),'o','MarkerSize',6)
#plot(real(znx),imag(znx),'magenta')
#plot(real(baseVector1),imag(baseVector1))
#plot(real(baseVector1_1),imag(baseVector1_1),'green')
#
#scf(2)
#plot(real(zn2),imag(zn2),'o','MarkerSize',6)
#plot(real(zn2x),imag(zn2x),'red')
#plot(real(baseVector2),imag(baseVector2),'black')
#plot(real(baseVector2_1),imag(baseVector2_1),'green')
#
#scf(3)
#plot(real(zn3),imag(zn3),'o','MarkerSize',6)
#plot(real(zn3x),imag(zn3x),'red')
#plot(real(baseVector3),imag(baseVector3))
#plot(real(baseVector3_1),imag(baseVector3_1),'green')
#
###scf(4)
###plot(real(zn4),imag(zn4),'o','MarkerSize',6)
###plot(real(zn4x),imag(zn4x),'red')
###plot(real(baseVector4),imag(baseVector4))
###plot(real(baseVector4_1),imag(baseVector4_1),'green')
###plot(real(baseVector4_2),imag(baseVector4_2),'cyan')
#
#scf(5)
#if sel_gen == 0:
#    ##degenerate case: plot each sub_polygram consecutively; add a final point to complete each sub_polygram
#    plot(real(zn5),imag(zn5),'o','MarkerSize',6)
#    for r=1:sub_poly
#        plot(real(zn5x((r*sub_pts)-(sub_pts-r):(r*sub_pts)+r)),imag(zn5x((r*sub_pts)-(sub_pts-r):(r*sub_pts)+r)),'red')
#    end
#else
#    ##generate case: add final point to complete unicursal polygram
#    plot(real(zn5),imag(zn5),'o','MarkerSize',6)
#    plot(real(zn5x),imag(zn5x),'red')
#end
#    
#
###polarplot
###[p1,p2]: p1 = color - 1=black,2=blue,3=green,4=cyan,5=red,6=magenta,7=yellow
#scf(6)
#if sel_gen == 0 then
#    ##degenerate case: plot each sub_polygram consecutively; add a final point to complete each sub_polygram
#    ##polarplot(baseVectorTheta,baseVectorRo)
#    for s=1:sub_poly
#        ##plot(real(zn5x((r*sub_pts)-(sub_pts-r):(r*sub_pts)+r)),imag(zn5x((r*sub_pts)-(sub_pts-r):(r*sub_pts)+r)),'red')
#        polarplot(z5Thetax((s*sub_pts)-(sub_pts-s):(s*sub_pts)+s),z5Rox((s*sub_pts)-(sub_pts-s):(s*sub_pts)+s),[6,2]) 
#    end     
#else   
#    ##generate case: add final point to complete unicursal polygram 
#    polarplot(z5Thetax,z5Rox,[6,2]) 
#end
#
###plot of basevectors
#scf(7)
#plot(real(baseVector),imag(baseVector))

##/////////////////////////////////////////////////////////////////////////////////////////////
###############################################################################################
##end : plotting
###############################################################################################
##/////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         